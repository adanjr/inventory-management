// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  userId           String      @id @default(uuid())
  name             String
  email            String      @unique
  password         String
  roles            UserRole[]
  locations_managed Locations[]
}

model Roles {
  roleId        String          @id @default(uuid())
  name          String          @unique
  users         UserRole[]      // Relación con la tabla intermedia UserRole
  permissions   RolePermission[] // Relación con la tabla intermedia RolePermission
}

model Permissions {
  permissionId String           @id @default(uuid())
  name         String           @unique
  description  String?
  roles        RolePermission[] // Relación con la tabla intermedia RolePermission
}

// Tabla intermedia para User <-> Role
model UserRole {
  id        String @id @default(uuid())
  user      Users  @relation(fields: [userId], references: [userId])
  userId    String
  role      Roles  @relation(fields: [roleId], references: [roleId])
  roleId    String

  @@unique([userId, roleId])
}

// Tabla intermedia para Role <-> Permission
model RolePermission {
  id           String      @id @default(uuid())
  role         Roles       @relation(fields: [roleId], references: [roleId])
  roleId       String
  permission   Permissions @relation(fields: [permissionId], references: [permissionId])
  permissionId String

  @@unique([roleId, permissionId])
}

model Products {
  productId          Int      @id @default(autoincrement())
  productCode        String?
  name               String
  description        String?
  price              Float
  rating             Float?
  stockQuantity      Int  
  categoryId         Int  
  manufacturerId     Int
  locationId         Int  // Location of the product  
  barcode            String?        // Código de barras único (opcional, para inventario)
  mainImageUrl       String?      
  additionalImages   String[]
  reorderQuantity    Int?

  category           Categories  @relation(fields: [categoryId], references: [categoryId])
  manufacturer       Manufacturers  @relation(fields: [manufacturerId], references: [manufacturerId])
  location           Locations @relation(fields: [locationId], references: [locationId])  

  inventoryLocations InventoryLocations[]
  saleDetails        SaleDetails[]
  purchaseDetails    PurchaseDetails[]
  movementDetail     MovementDetail[]
}

model Categories {
  categoryId   Int          @id @default(autoincrement())
  name         String
  description  String
  products     Products[]     
}

model Manufacturers {
  manufacturerId  Int        @id @default(autoincrement())
  name            String
  country         String
  contact_info    String?
  products     Products[] 
}

model Vehicles {
  vehicleId             Int            @id @default(autoincrement())
  vin                   String?        // Vehicle Identification Number (opcional para motocicletas)
  internal_serial       String?       
  engineNumber          String?   
  modelId               Int            // Modelo del vehículo
  year                  Int            // Año de fabricación
  colorId               Int            // Color del vehículo
  mileage               Float          // Kilometraje del vehículo
  price                 Float          // Precio de venta del vehículo
  conditionId           Int            // Nuevo/Usado
  availabilityStatusId  Int            // Disponible, Vendido, Fuera de inventario  
  statusId              Int            // Estado del vehículo
  locationId            Int?            // Almacén, Sucursal
  stockNumber           String         // Número de inventario interno
  barcode               String?        // Código de barras único (opcional, para inventario)
  qrCode                String?        // Código QR único (opcional, para inventario)
  description           String?        // Descripción del vehículo (opcional)
  mainImageUrl          String?      
  additionalImages      String[]
  createdAt             DateTime?      @default(now())
  updatedAt             DateTime?      @updatedAt
  lastAuditDate         DateTime?      // Fecha de la última auditoría de inventario    
  warrantyId            Int
  batteryWarrantyId     Int?

  // Relaciones
  status                VehicleStatus             @relation(fields: [statusId], references: [statusId])
  model                 Models                    @relation(fields: [modelId], references: [modelId])
  color                 Colors                    @relation(fields: [colorId], references: [colorId])
  condition             VehicleCondition          @relation(fields: [conditionId], references: [conditionId]) 
  availabilityStatus    VehicleAvailabilityStatus @relation(fields: [availabilityStatusId], references: [statusId]) 
  location              Locations?                 @relation(fields: [locationId], references: [locationId])
  warranty              Warranty                  @relation(fields: [warrantyId], references: [warrantyId])
  batteryWarranty       BatteryWarranty?           @relation(fields: [batteryWarrantyId], references: [batteryWarrantyId])
    
  auditLogs                 AuditLogs[]    // Relación con registros de auditoría
  vehicleInventoryLocations VehicleInventoryLocations[]  
  saleDetail                SaleDetails[]
  purchaseDetail            PurchaseDetails[]
  movementDetail            MovementDetail[] 
}

model Models {
  modelId         Int      @id @default(autoincrement())
  name            String   @unique   
  makeId          Int      // Marca del vehículo
  familyId        Int? 
  year_start      String?   
  year_end        String?
  vehicleTypeId   Int            // Identifica si es un coche o una motocicleta
  engineTypeId    Int      // Tipo de motor
  fuelTypeId      Int?     // Solo aplica para vehículos que no sean completamente eléctricos
  transmissionId  Int      // Transmisión
  batteryCapacity Float?   // Capacidad de batería en kWh (para eléctricos)
  range           Float?   // Autonomía del vehículo en km (solo para eléctricos)
  wheelCount      Int      // Número de ruedas (4 para autos, 2 para motocicletas)
  basePrice       Float    // Precio base del modelo
  chargeTime      Float    // Horas de carga
  motorWattage    Int?     // Potencia del motor, si aplica
  weightCapacity  Float    // Capacidad de peso
  speed           Float    // Velocidad máxima
  batteryVoltage  Float    // Voltaje de la batería
  rating          Float?

  mainImageUrl      String?      
  additionalImages  String[]
  
  make            Makes           @relation(fields: [makeId], references: [makeId]) 
  family          Families?        @relation(fields: [familyId], references: [familyId])   
  vehicleType     VehicleTypes    @relation(fields: [vehicleTypeId], references: [vehicleTypeId])  
  engineType      EngineTypes     @relation(fields: [engineTypeId], references: [engineTypeId])
  fuelType        FuelTypes?      @relation(fields: [fuelTypeId], references: [fuelTypeId])
  transmission    Transmissions   @relation(fields: [transmissionId], references: [transmissionId])

  purchaseDetail  PurchaseDetails[]
  vehicles        Vehicles[]
}

model Families {
  familyId        Int       @id @default(autoincrement())
  name            String   
  description     String       
  year_start      String?   
  year_end        String?
  makeId          Int      
  make            Makes     @relation(fields: [makeId], references: [makeId])  
   
  models          Models[]
}

model VehicleTypes {
  vehicleTypeId Int         @id @default(autoincrement())
  name          String      @unique  // Ejemplo: "Automóvil", "Motocicleta"
  models        Models[]
}

model Makes {
  makeId   Int      @id @default(autoincrement())
  name     String   @unique
  country  String?   
  website  String?
  phone    String?
  mail     String?
  families   Families[]
  models   Models[]
}

model VehicleCondition {
  conditionId Int        @id @default(autoincrement())
  name        String     // e.g., "Nuevo" o "Usado"
  vehicles    Vehicles[]
}

model VehicleAvailabilityStatus {
  statusId    Int         @id @default(autoincrement())
  name        String      // e.g., "Disponible", "Vendido", "Fuera de inventario"
  vehicles    Vehicles[]
}

model Colors {
  colorId         Int          @id @default(autoincrement())
  name            String       @unique
  hexadecimal     String?       

  purchaseDetail        PurchaseDetails[]
  vehicles Vehicles[]
}

model EngineTypes {
  engineTypeId Int        @id @default(autoincrement())
  name         String     @unique
  description  String?    // Descripción opcional del tipo de motor
  models       Models[]
}

model FuelTypes {
  fuelTypeId Int        @id @default(autoincrement())
  name       String     @unique // Ejemplo: "Gasolina", "Diésel", "Eléctrico"
  models     Models[]
}

model Transmissions {
  transmissionId Int        @id @default(autoincrement())
  type           String     @unique  // Tipo de transmisión
  models       Models[]
}

model VehicleStatus {
  statusId Int        @id @default(autoincrement())
  name     String     @unique // Estado del vehículo
  vehicles Vehicles[]
} 

model Warranty {
  warrantyId      Int       @id @default(autoincrement())
  name            String    @default("Garantia")
  durationMonths  Int  
  description     String?
  vehicle         Vehicles[]
}

model BatteryWarranty {
  batteryWarrantyId   Int       @id @default(autoincrement())
  name                String    @default("Garantia")
  durationMonths      Int  
  description         String?
  vehicle             Vehicles[]
}

model Sales {
  saleId            Int           @id @default(autoincrement())   
  timestamp         DateTime
  totalAmount       Float
  paymentMethod     String?
  customerId        Int?
  enviarADomicilio  Boolean
  recogerEnTieda    Boolean
  compraOnline      Boolean
  locationId        Int?
  userId            String?
  
  customer        Customers?    @relation(fields: [customerId], references: [customerId])
  location        Locations?    @relation(fields: [locationId], references: [locationId])
  
  saleDetails SaleDetails[]
}

model SaleDetails {
  saleDetailId                  Int         @id @default(autoincrement())
  saleId                        Int         
  productId                     Int?      
  vehicleId                     Int?       
  quantity                      Int        
  unitPrice                     Float
  subtotal                      Float
  assemblyAndConfigurationCost  Float?

  vehicle                       Vehicles?   @relation(fields: [vehicleId], references: [vehicleId])
  product                       Products?   @relation(fields: [productId], references: [productId]) 
  sale                          Sales       @relation(fields: [saleId], references: [saleId])
}

model Locations {
  locationId        Int         @id @default(autoincrement())
  name              String
  type              String      // "branch" para sucursales, "warehouse" para bodegas
  address           String?
  postalCode        String?     // Código postal opcional
  city              String?     // Ciudad opcional
  state             String?     // Estado opcional
  country           String?     // País opcional
  created_at        DateTime    @default(now())
  manager           Users?      @relation(fields: [managerId], references: [userId]) // Relación con User
  managerId         String?
  latitude          Float?      // Coordenada de latitud para geolocalización
  longitude         Float?      // Coordenada de longitud para geolocalización  
  mainImageUrl      String?      
  additionalImages  String[]

  vehicles          Vehicles[]
  products          Products[]    
  inventoryLocation InventoryLocations[]
  unitLocation      VehicleInventoryLocations[]
  sales             Sales[]
  movementFrom      Movements[] @relation("MovementFrom")
  movementTo        Movements[] @relation("MovementTo")
}

model InventoryLocations {
  inventoryLocationId Int       @id @default(autoincrement())
  productId           Int?      
  locationId          Int   
  quantity_in_stock   Int?
  minimumStockLevel   Int?
  maximumStockLevel   Int?
  reorderPoint        Int?
  last_updated_at     DateTime @updatedAt

  product             Products? @relation(fields: [productId], references: [productId])
  location            Locations @relation(fields: [locationId], references: [locationId])
}

model VehicleInventoryLocations {
  vehicleInventoryLocationId   Int        @id @default(autoincrement())
  vehicle                      Vehicles?  @relation(fields: [vehicleId], references: [vehicleId])  
  vehicleId                    Int?      
  location                     Locations  @relation(fields: [locationId], references: [locationId])
  locationId                   Int       
  status                       String     // Estado de la unidad (disponible, en tránsito, etc.)
  lastUpdatedAt                DateTime   @updatedAt
}

model Movements {
  movementId        Int         @id @default(autoincrement())  
  fromLocationId    Int?        
  toLocationId      Int?  
  quantity          Int?        // Solo para productos sin número de serie
  movementType      String      // "entry", "exit", "transfer"
  movementDate      DateTime    @default(now())
  orderReference    String?
  status            String      // Estado del movimiento (completed, in transit)
  notes             String?
  approved          Boolean
  createdBy         String?
  approvedBy        String?
  lastUpdatedAt     DateTime    @updatedAt
  initialMovementId Int?      // Campo opcional para vincular movimientos iniciales en transferencias

  arrivalDate       DateTime?    // Fecha en la que el inventario llegó a la ubicación destino
  receivedBy        String?      // Usuario que confirmó la recepción
  isReceived        Boolean?     // Confirmación de que el inventario llegó correctamente
  receptionNotes    String?      // Notas adicionales sobre la recepción (daños, diferencias, etc.)

  fromLocation      Locations?   @relation("MovementFrom", fields: [fromLocationId], references: [locationId])
  toLocation        Locations?   @relation("MovementTo", fields: [toLocationId], references: [locationId])

  MovementDetail    MovementDetail[]
}

model MovementDetail {
  movementDetailId    Int         @id @default(autoincrement())
  movementId          Int      
  vehicleId           Int?        // The vehicle being moved
  productId           Int?   
  inspectionStatus    String      // e.g., 'Pending', 'Approved', 'Rejected'

  movement            Movements?  @relation(fields: [movementId], references: [movementId])
  product             Products?   @relation(fields: [productId], references: [productId])
  vehicle             Vehicles?   @relation(fields: [vehicleId], references: [vehicleId])
}

model Customers {
  customerId   Int      @id @default(autoincrement())
  name         String
  lastname     String?
  email        String   @unique
  phone        String
  address      String?  // Dirección opcional
  postalCode   String?  // Código postal opcional
  city         String?  // Ciudad opcional
  state        String?  // Estado opcional
  country      String?  // País opcional
  mainImageUrl String?
  sales        Sales[]
  createdAt    DateTime @default(now())  
}

model Suppliers {
  supplierId    Int      @id @default(autoincrement())
  name          String
  address       String?
  postalCode    String?
  city          String?
  state         String?
  country       String?
  email         String?
  phone         String?
  mainImageUrl  String?
  
  createdAt     DateTime @default(now())
  purchase      Purchases[]
}

model Purchases {
  purchaseId            Int         @id @default(autoincrement())
  purchaseOrder         String
  reference             String
  purchaseDate          DateTime
  receiptMethod         String
  deliveryEstimate      DateTime
  deliveryDate          DateTime?
  timestamp             DateTime    @default(now())
  paymentTerm           String
  totalPurchase         Float  
  supplierId            Int?
  shipmentPreference    String
  termsConditions       String
  purchaseStatus        String // Borrador, En Proceso, Recibida, Completada
  notes                 String
  urlAttachments        String[]

  supplier              Suppliers? @relation(fields: [supplierId], references: [supplierId])

  purchaseDetails       PurchaseDetails[]
}

model PurchaseDetails {
  purchaseDetailId  Int         @id @default(autoincrement())  
  purchaseId        Int         
  productId         Int?
  modelId           Int? 
  colorId           Int? 
  serialNumber      String?
  vehicleId         Int?        
  quantity          Int        // Para productos sin número de serie
  unitPrice         Float
  subtotal          Float
  expectedDate      DateTime?
  actualDate        DateTime?
  receptionStatus   String // Borrador, Creado, Recibido, Validado, Completado
  condition         String?
       
  purchase          Purchases   @relation(fields: [purchaseId], references: [purchaseId])
  product           Products?    @relation(fields: [productId], references: [productId])
  model             Models?   @relation(fields: [modelId], references: [modelId])
  color             Colors?   @relation(fields: [colorId], references: [colorId])  
  vehicles          Vehicles?   @relation(fields: [vehicleId], references: [vehicleId])
}

model AuditLogs {
  auditLogId    Int        @id @default(autoincrement())
  vehicle       Vehicles   @relation(fields: [vehicleId], references: [vehicleId])
  vehicleId     Int         // Relación con el vehículo auditado
  auditDate     DateTime    // Fecha de la auditoría
  auditType     AuditTypes  @relation(fields: [auditTypeId], references: [auditTypeId])
  auditTypeId   Int 
  notes         String?     // Notas de la auditoría
  createdAt     DateTime    @default(now())
}

model AuditTypes {
  auditTypeId   Int         @id @default(autoincrement())
  name          String      @unique // Ejemplo: "Inventario Físico", "Ajuste de Inventario", "Auditoría General"
  auditLogs     AuditLogs[]
}

model Expenses {
  expenseId String   @id
  category  String
  amount    Float
  timestamp DateTime
}

model SalesSummary {
  salesSummaryId   String   @unique @default(uuid())
  totalValue       Float
  changePercentage Float?
  date             DateTime
}

model PurchaseSummary {
  purchaseSummaryId String   @unique @default(uuid())
  totalPurchased    Float
  changePercentage  Float?
  date              DateTime
}

model ExpenseSummary {
  expenseSummaryId  String              @id
  totalExpenses     Float
  date              DateTime
  ExpenseByCategory ExpenseByCategory[]
}

model ExpenseByCategory {
  expenseByCategoryId String         @id
  expenseSummaryId    String
  category            String
  amount              BigInt
  date                DateTime
  expenseSummary      ExpenseSummary @relation(fields: [expenseSummaryId], references: [expenseSummaryId])
}

model Organization {
  id                      Int      @id @default(autoincrement())
  name                    String   // Nombre de la organización
  commercialName          String?  // Nombre comercial
  rfc                     String   // RFC (Registro Federal de Contribuyentes)
  email                   String?  // Correo electrónico
  phone                   String?  // Teléfono de contacto
  address                 String   // Dirección principal
  address2                String?   // Dirección principal
  neighborhood            String?   // Dirección principal
  city                    String   // Ciudad
  state                   String   // Estado
  postalCode             String?  // Código postal
  country                 String   // País
  createdAt               DateTime @default(now()) // Fecha de creación
  updatedAt               DateTime @updatedAt // Fecha de actualización
  purchaseOrderPrefix     String   // Prefijo para órdenes de compra
  saleOrderPrefix         String   // Prefijo para órdenes de venta
  invoicePrefix           String   // Prefijo para facturas
  startingOrderNumber     Int      // Número inicial para pedidos
  startingInvoiceNumber   Int      // Número inicial para facturas
  startingPurchaseOrderNumber Int   // Número inicial para órdenes de compra
  responsiblePerson       String?  // Persona responsable
  logoUrl                 String?  // Persona responsable
}